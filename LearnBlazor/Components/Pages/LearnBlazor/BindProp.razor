@page "/learnBlazor/bindprop"

<div class="row">
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Playground</h3>
        <hr />
        IsActive:
        <input type="checkbox" @bind="@Product.IsActive" />
        <br />

        Input Price:
        <input type="number" @bind="@Product.Price" @bind:event="oninput" />
        <br />
        <br />

        Product Properties:
        <select @bind="selectedProp">
            @foreach (var prop in Product.ProductProperties)
            {
                <option value="@prop.Key">@prop.Key</option>
            }
        </select>
    </div>
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product - Summary</h3>

        Name: @Product.Name
        <br />
        IsActive: @Product.IsActive
        <br />
        Price: @Product.Price
        <br />
        This Product is: @(Product.IsActive ? "Active" : "Inactive")
        <br />

        <br />
        Selected Prop: @selectedProp

        @if (!string.IsNullOrEmpty(selectedProp))
        {
            <p>Selected Value: @Product.ProductProperties.FirstOrDefault(p => p.Key.Equals(selectedProp)).Value</p>
        }
    </div>
    <div class="col-12 p-4">
        <h3 class="text-success">Product Table</h3>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Is Active</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Products)
                {
                    <tr>
                        <td><input type="text" @bind="product.Name" @bind:event="oninput" /></td>
                        <td><input type="number" @bind="product.Price" @bind:event="oninput" /></td>
                        <td><input type="checkbox" @bind="@product.IsActive" /></td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        @if (Products != null)
        {
            <h3>Product Summary</h3>
            foreach (var product in Products)
            {
                <p>@product.Name [@product.Price] is @(product.IsActive ? "Active" : "Inactive")</p>
            }
        }
    </div>
</div>

@code {
    private string selectedProp = string.Empty;

    Product Product = new()
    {
        Id = 1,
        Name = "Product 1",
        IsActive = true,
        Price = 5,
        ProductProperties =
        [
            new ProductProp { Id = 1, Key = "Color", Value = "Red" },
            new ProductProp { Id = 2, Key = "Size", Value = "20oz" },
            new ProductProp { Id = 3, Key = "Flavour", Value = "Rose" },
        ]
    };

    List<Product> Products = new();

    protected override void OnInitialized()
    {
        Products.Add(new()
        {
            Id = 1,
            Name = "Midnight Blaze",
            IsActive = false,
            ProductProperties = new()
            {
                new ProductProp { Id = 1, Key = "Flavor", Value = "Rose"},
                new ProductProp { Id = 2, Key = "Size", Value = "20oz"},
                new ProductProp { Id = 3, Key = "Color", Value="Purple" },
            }
        });

        Products.Add(new()
        {
            Id = 2,
            Name = "Blossom Lily",
            IsActive = true,
            ProductProperties = new()
            {
                new ProductProp { Id = 1, Key = "Flavor", Value = "Lily" },
                new ProductProp { Id = 2, Key = "Size", Value = "18oz" },
                new ProductProp {Id = 3,Key = "Color",Value = "White"},
            }
        });
    }
}
